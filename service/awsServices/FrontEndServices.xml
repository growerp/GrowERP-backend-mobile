<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="get" noun="WikiPageList">
        <in-parameters>
            <parameter name="productStoreId" required="true"/>
            <parameter name="wikiSpaceId" required="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="wikiPageList" type="List"><parameter name="wikiPageId"/></parameter>
        </out-parameters>
        <actions>
            <!-- ### Need to fix : List the alias name for all menu items
            <service-call name="org.moqui.impl.WikiServices.get#WikiPageId" in-map="context" out-map="outMap"/>
            -->
            <!-- Hard code for set list menu on antwebsystems page -->
            <script>
                wikiPageList = [];
                wikiPageList.add('/aws/aws_product':"Product");
                wikiPageList.add('/aws/aws_services': "Services");
                wikiPageList.add('/aws/aws_about': "About");
                wikiPageList.add('/aws/Blog': "Blog");
                wikiPageList.add('/aws/aws_job': "Job");
                wikiPageList.add('/aws/aws_training': "Partner");
                wikiPageList.add('/aws/aws_contact': "Contact");
                wikiPageList.add('../vapps': "Login");
            </script>
        </actions>
    </service>

    <service verb="add" noun="SubScribeEmail" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="email" required="true"/>
        </in-parameters>
        <actions>
            <set field="fromDate" value="${ec.user.nowTimestamp}"/>
            <entity-find entity-name="mantle.marketing.contact.ContactList" list="contactList" cache="true"/>
            <if condition="contactList">
                <set field="contactList" from="contactList?.first()"/>
            </if>
            <entity-find entity-name="mantle.party.contact.PartyContactMechInfo" list="partyContactMechInfoList" cache="true">
                <date-filter/><econdition field-name="infoString" from="email"/><econdition field-name="contactMechPurposeId" value="EmailPrimary"/>
                <econdition field-name="contactMechTypeEnumId" value="CmtEmailAddress"/>
            </entity-find>
            <if condition="partyContactMechInfoList">
                <set field="partyId" from="partyContactMechInfoList?.first()?.partyId"/>
                <set field="contactMechId" from="partyContactMechInfoList?.first()?.contactMechId"/>
                <else>
                    <set field="partyId" value="_NA_"/>
                    <service-call name="create#mantle.party.contact.ContactMech" out-map="context"
                    in-map="[contactMechTypeEnumId:'CmtEmailAddress', infoString:email]"/>
                    <service-call name="create#mantle.party.contact.PartyContactMech" in-map="context + [contactMechPurposeId:'EmailPrimary']" out-map="context"/>
                    <set field="contactMechId" from="context.contactMechId"/>
                </else>
            </if>
            <entity-find entity-name="mantle.marketing.contact.ContactListParty" list="contactListParty" cache="true">
                <date-filter/><econdition field-name="contactListId" from="contactList.contactListId"/><econdition field-name="statusId" value="CLPT_PENDING"/><econdition field-name="preferredContactMechId" from="contactMechId"/>
            </entity-find>
            <if condition="!contactListParty">
                <script>optInVerifyCode = Long.toString(Math.round(9999999999L * Math.random()))</script>
                <if condition="partyId &amp;&amp; contactList">
                    <service-call name="create#mantle.marketing.contact.ContactListParty" out-map="context"
                        in-map="[contactListId:contactList.contactListId, partyId:partyId, statusId:'CLPT_PENDING', fromDate:fromDate, optInVerifyCode:optInVerifyCode, preferredContactMechId:contactMechId]"/>
                    <if condition="context">
                        <set field="context.sendTo" from="email"/>
                        <set field="context.contactListId" from="contactList.contactListId"/>
                        <set field="context.optInVerifyCode" from="optInVerifyCode"/>
                        <set field="context.preferredContactMechId" from="contactMechId"/>
                    </if>
                    <service-call name="popstore.EmailServices.sendmail#SendEmailFormScreens" in-map="context"/>
                </if>
                <else>
                </else>
            </if>
        </actions>
    </service>
    <service verb="get" noun="WikiBlogList" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="wikiSpaceId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="wikiBloglist" type="List"><parameter name="wikiPageId"/></parameter>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.resource.wiki.WikiBlogFindView" list="wikiBloglist" cache="true">
                <econdition field-name="wikiSpaceId" from="wikiSpaceId"/>
                <econdition field-name="wikiPageCategoryId" value="BLOG_CONTENT"/>
            </entity-find>

        </actions>
    </service>
    <service verb="get" noun="WikiBlogContent" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="wikiSpaceId" required="true"/>
            <parameter name="pagePath" required="true"/>
            <parameter name="ver" required="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="pageText"><description>conetent page text.</description></parameter>
        </out-parameters>
        <actions>
          <service-call name="org.moqui.impl.WikiServices.get#PublishedWikiPageText" out-map="context"
                        in-map="[wikiSpaceId:wikiSpaceId, pagePath:pagePath, versionName:ver]"/>
        </actions>
    </service>

    <service verb="get" noun="CategoryInfo">
        <in-parameters>
            <parameter name="productCategoryId" required="true"/>
            <parameter name="productStoreId" required="true"/>
            <parameter name="locale"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters entity-name="mantle.product.category.ProductCategory" include="nonpk"/>
            <parameter name="subCategoryList" type="List"><parameter name="categoryInfo" type="Map"/></parameter>
        </out-parameters>
        <actions>

            <entity-find-one entity-name="mantle.product.category.ProductCategory" value-field="productCategory" cache="true"/>
            <if condition="productCategory == null"><return error="true" message="Category not found with ID ${productCategoryId}"/></if>
            <script>context.putAll(productCategory)</script>

            <entity-find entity-name="mantle.product.category.ProductCategoryRollup" list="rollupList" cache="true">
                <date-filter/><econdition field-name="parentProductCategoryId" from="productCategoryId"/>
                <order-by field-name="sequenceNum"/>
            </entity-find>

            <set field="subCategoryList" from="[]"/>
            <iterate list="rollupList" entry="rollup">
                <entity-find-one entity-name="mantle.product.category.ProductCategory" value-field="productCategory" cache="true">
                    <field-map field-name="productCategoryId" from="rollup.productCategoryId"/></entity-find-one>

                <!-- TODO: ProductCategoryContent for smallImageInfo -->
                <!-- ProductCategoryContent for Category Name, Description, Description - Long -->
                <set field="categoryName" from="productCategory ? productCategory.categoryName : null"/>
                <set field="description" from="productCategory ? productCategory.description : null"/>
                <entity-find entity-name="mantle.product.category.ProductCategoryContent" list="productCategoryContentList" cache="true">
                    <date-filter/><econdition field-name="productCategoryId" from="productCategory.productCategoryId"/>
                    <order-by field-name="sequenceNum,-fromDate"/>
                </entity-find>
                <if condition="locale">
                    <!-- filter after by locale to streamline cached find -->
                    <set field="langLocale" from="locale.contains('_') ? locale.substring(locale.indexOf('_')) : null"/>
                    <set field="productCategoryContentList" from="productCategoryContentList.findAll({ it.locale == null || it.locale == locale || it.locale == langLocale })"/>
                </if>
                <if condition="productCategoryContentList">
                    <set field="descLongLocation" from="productCategoryContentList.find({ 'PcctDescription'.equals(it.categoryContentTypeEnumId) })?.contentLocation"/>
                    <if condition="descLongLocation == null">
                        <set field="descLongLocation" from="productCategoryContentList.find({ 'PcctDescriptionLong'.equals(it.categoryContentTypeEnumId) })?.contentLocation"/></if>
                    <if condition="descLongLocation"><set field="description" from="ec.resource.getLocationText(descLongLocation, true)"/></if>
                    <!-- category name can be PcctCategoryName or from description we just looked up -->
                    <set field="categoryNameLocation" from="productCategoryContentList.find({ 'PcctCategoryName'.equals(it.categoryContentTypeEnumId) })?.contentLocation"/>
                    <if condition="categoryNameLocation"><set field="categoryName" from="ec.resource.getLocationText(categoryNameLocation, true)"/></if>

                    <set field="smallImageInfo" from="productCategoryContentList.find({ 'PcctImageUrl'.equals(it.categoryContentTypeEnumId) })"/>
                </if>

                <set field="description" from="categoryName ? categoryName : productCategory.description"/>
                <set field="categoryName" from="description ? description : productCategory.categoryName"/>

                <script>subCategoryList.add([productCategoryId:productCategory.productCategoryId, pseudoId:productCategory.pseudoId,
                    categoryName:categoryName, description:description,
                    smallImageInfo:smallImageInfo, sequenceNum:rollup.sequenceNum])</script>
            </iterate>
        </actions>
    </service>

    <!-- Get all categories in browse root for Navigation -->
    <service verb="get" noun="NavCategories" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="productStoreId" required="true"/>
            <parameter name="locale"/>
        </in-parameters>
        <out-parameters>
            <parameter name="subCategorylist" type="List"><parameter name="subCategoryMap"/></parameter>
        </out-parameters>
        <actions>
            <set field="subCategorylist" from="null"/>
            <service-call name="popstore.StoreServices.get#StoreInfo" in-map="[productStoreId:productStoreId]" out-map="storeInfo"/>
            <set field="browseRootCategory" from="storeInfo.categoryByType.PsctBrowseRoot"/>
            <set field="browseRootCategoryId" from="browseRootCategory?.productCategoryId"/>
            <service-call name="awsServices.FrontEndServices.get#CategoryInfo" out-map="browseRootCategoryInfo"
                          in-map="[productCategoryId:browseRootCategoryId, productStoreId:productStoreId, locale:locale]"/>

            <!-- get sub categories-->
            <set field="subCategorylist" from="browseRootCategoryInfo.subCategoryList"/>
        </actions>
    </service>
    <service verb="get" noun="HomeProducts" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="productStoreId" required="true"/>
            <parameter name="locale"/>
        </in-parameters>
        <out-parameters>
            <parameter name="homeProductlist" type="List"><parameter name="subCategoryMap"/></parameter>
            <parameter name="homeCategoryInfo"/>
        </out-parameters>
        <actions>
            <set field="homeProductlist" from="null"/>
            <service-call name="popstore.StoreServices.get#StoreInfo" in-map="[productStoreId:productStoreId]" out-map="storeInfo"/>

            <set field="homeCategory" from="storeInfo.categoryByType.PsctNewProducts"/>
            <set field="homeCategoryId" from="homeCategory.productCategoryId"/>

            <service-call name="awsServices.FrontEndServices.get#CategoryInfo" out-map="homeCategoryInfo"
                          in-map="[productCategoryId:homeCategoryId, productStoreId:productStoreId, locale:locale]"/>
            <if condition="productStoreId">
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore" cache="true"/>
                <if condition="!priceUomId"><set field="priceUomId" from="productStore?.defaultCurrencyUomId"/></if>
            </if>
            <service-call name="awsServices.FrontEndServices.get#CategoryProducts" in-map="[productCategoryId:homeCategoryId,priceUomId:priceUomId,locale:locale,productStoreId:productStoreId]" out-map="homeCategoryInfo"/>
            <if condition="homeCategoryInfo">
                <set field="homeProductlist" from="homeCategoryInfo?.productList"/>
            </if>
        </actions>
    </service>

    <service verb="get" noun="CategoryProducts">
        <in-parameters>
            <parameter name="productCategoryId" required="true"/>
            <parameter name="productStoreId"/>
            <parameter name="priceUomId"/>
            <parameter name="locale"/>
            <parameter name="orderBy" default-value="sequenceNum"/>
            <parameter name="pageIndex" default="0"/>
            <parameter name="pageSize" default="6"/>
        </in-parameters>
        <out-parameters>
            <parameter name="categoryInfo" type="Map"/>
            <parameter name="productList" type="List"><parameter name="productInfo" type="Map">
                <parameter name="productId"/><parameter name="pseudoId"/><parameter name="productName"/><parameter name="description"/>
                <parameter name="price" type="BigDecimal"/><parameter name="listPrice" type="BigDecimal"/><parameter name="priceUomId"/>
                <parameter name="sequenceNum" type="Long"/>
                <parameter name="smallImageInfo" type="Map"/><parameter name="mediumImageInfo" type="Map"/>
                <parameter name="numberBedrooms"/><parameter name="numberBathrooms"/>
                <parameter name="livingSize"/><parameter name="livingSizeUnit"/>
                <parameter name="landSize"/><parameter name="landSizeUnit"/>
            </parameter></parameter>
            <parameter name="productList" type="List"><parameter name="document" type="Map"/></parameter>
            <parameter name="productListCount" type="Integer"><description>The total count of hits, not just the
                limited number returned.</description></parameter>
            <parameter name="productListPageIndex" type="Integer"/>
            <parameter name="productListPageSize" type="Integer"/>
            <parameter name="productListPageMaxIndex" type="Integer"/>
            <parameter name="productListPageRangeLow" type="Integer"/>
            <parameter name="productListPageRangeHigh" type="Integer"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.category.ProductCategory" value-field="productCategory" cache="true"/>
            <if condition="productCategory == null"><return error="true" message="Category not found with ID ${productCategoryId}"/></if>
            <set field="categoryInfo" from="[:]"/>
            <set field="categoryInfo.productCategoryId" from="productCategory.productCategoryId"/>

            <!-- ProductCategoryContent for Category Name, Description, Description - Long -->
            <set field="categoryName" from="productCategory ? productCategory.categoryName : null"/>
            <set field="description" from="productCategory ? productCategory.description : null"/>

            <entity-find entity-name="mantle.product.category.ProductCategoryContent" list="productCategoryContentList" cache="true">
                <date-filter/><econdition field-name="productCategoryId" from="productCategory.productCategoryId"/>
                <order-by field-name="sequenceNum,-fromDate"/>
            </entity-find>

            <if condition="locale">
                <!-- filter after by locale to streamline cached find -->
                <set field="langLocale" from="locale.contains('_') ? locale.substring(locale.indexOf('_')) : null"/>
                <set field="productCategoryContentList" from="productCategoryContentList.findAll({ it.locale == null || it.locale == locale || it.locale == langLocale })"/>
            </if>
            <if condition="productCategoryContentList">

                <set field="descLongLocation" from="productCategoryContentList.find({ 'PcctDescription'.equals(it.categoryContentTypeEnumId) })?.contentLocation"/>
                <if condition="descLongLocation == null">
                    <set field="descLongLocation" from="productCategoryContentList.find({ 'PcctDescriptionLong'.equals(it.categoryContentTypeEnumId) })?.contentLocation"/></if>
                <if condition="descLongLocation">
                    <set field="description" from="ec.resource.getLocationText(descLongLocation, true)"/>
                </if>
                <!-- category name can be PcctCategoryName or from description we just looked up -->
                <set field="categoryNameLocation" from="productCategoryContentList.find({ 'PcctCategoryName'.equals(it.categoryContentTypeEnumId) })?.contentLocation"/>
                <if condition="categoryNameLocation">
                    <set field="categoryName" from="ec.resource.getLocationText(categoryNameLocation, true)"/>
                </if>
            </if>

            <set field="categoryInfo.categoryName" from="categoryName ? categoryName : productCategory.categoryName"/>
            <set field="categoryInfo.description" from="description ? description : productCategory.description"/>

            <if condition="productStoreId">
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore" cache="true"/>
                <if condition="!priceUomId"><set field="priceUomId" from="productStore?.defaultCurrencyUomId"/></if>
                <set field="vendorPartyId" from="productStore?.organizationPartyId"/>
            </if>

            <!-- get entire cached list then paginate, for huge numbers of products in a category this is a bad approach (such sites should probably be purely search based) -->
            <!-- use the name 'productList' so pagination out-parameters are created automatically -->
            <entity-find entity-name="mantle.product.category.ProductCategoryMember" list="productList" cache="true">
                <search-form-inputs default-order-by="${orderBy}"/>
                <date-filter/><econdition field-name="productCategoryId"/>
            </entity-find>
            <set field="pcmList" from="productList"/>

            <set field="productList" from="[]"/>
            <iterate list="pcmList" entry="pcmp">
                <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                    <field-map field-name="productId" from="pcmp.productId"/></entity-find-one>

                <!-- Get geopoint of the product -->
                <entity-find-one entity-name="mantle.product.asset.AssetAndDetail" value-field="asset">
                    <field-map field-name="productId" from="pcmp.productId"/>
                    <field-map field-name="statusId" from="'AstAvailable'"/>
                </entity-find-one>
                <set field="longitude" from="null"/>
                <set field="latitude" from="null"/>
                <if condition="asset?.geoPointId">
                    <entity-find-one entity-name="moqui.basic.GeoPoint" value-field="geoPoint">
                        <field-map field-name="geoPointId" from="asset.geoPointId"/></entity-find-one>
                    <set field="longitude" from="geoPoint.longitude"/>
                    <set field="latitude" from="geoPoint.latitude"/>
                </if>

                <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap" out-map-add-to-existing="false"
                              in-map="[productId:pcmp.productId, priceUomId:priceUomId, productStoreId:productStoreId,
                                vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>

                <set field="smallImageInfo" from="null"/>
                <set field="mediumImageInfo" from="null"/>
                <entity-find entity-name="mantle.product.ProductContent" list="productContentList" cache="true">
                    <date-filter/><econdition field-name="productId" from="pcmp.productId"/>
                    <order-by field-name="sequenceNum,-fromDate"/>
                </entity-find>
                <if condition="locale">
                    <!-- filter after by locale to streamline cached find -->
                    <set field="langLocale" from="locale.contains('_') ? locale.substring(locale.indexOf('_')) : null"/>
                    <set field="productContentList" from="productContentList.findAll({ it.locale == null || it.locale == locale || it.locale == langLocale })"/>
                </if>
                <if condition="productContentList">
                    <!-- medium can be PcntImageMedium or PcntImageLarge -->
                    <set field="mediumImageInfo" from="productContentList.find({ 'PcntImageMedium'.equals(it.productContentTypeEnumId) })"/>
                    <if condition="mediumImageInfo == null">
                        <set field="mediumImageInfo" from="productContentList.find({ 'PcntImageLarge'.equals(it.productContentTypeEnumId) })"/></if>
                    <!-- small can be PcntImageSmall or from medium we just looked up -->
                    <set field="smallImageInfo" from="productContentList.find({ 'PcntImageSmall'.equals(it.productContentTypeEnumId) })"/>
                    <if condition="smallImageInfo == null"><set field="smallImageInfo" from="mediumImageInfo"/></if>
                </if>
                <!-- Get Number of bedrooms and bathrooms -->
                <set field="numberBedrooms" from="null"/>
                <set field="numberBathrooms" from="null"/>
                <set field="prodIdentList" from="null"/>
                <entity-find entity-name="mantle.product.ProductIdentification" list="prodIdentList">
                    <econdition field-name="productId" from="pcmp.productId"/>
                </entity-find>
                <if condition="prodIdentList">
                    <set field="numberBathrooms" from="prodIdentList.find({ 'PidtBathroom' == it.productIdTypeEnumId })?.idValue"/>
                    <set field="numberBedrooms" from="prodIdentList.find({ 'PidtBedroom' == it.productIdTypeEnumId })?.idValue"/>
                </if>
                <!-- Get Land size -->
                <entity-find entity-name="mantle.product.ProductDimensionAndType" list="dimensionList" cache="true">
                    <econdition field-name="productId" from="pcmp.productId"/>
                    <econdition field-name="dimensionTypeId" operator="in"
                                value="LandSize,LivingSize"/>
                    <order-by field-name="description"/>
                </entity-find>
                <if condition="dimensionList">
                    <set field="landSize" from="dimensionList.find({ 'LandSize' == it.dimensionTypeId })?.value"/>
                    <set field="landSizeUnit" from="dimensionList.find({ 'LandSize' == it.dimensionTypeId })?.uomAbbreviation"/>
                    <set field="livingSize" from="dimensionList.find({ 'LivingSize' == it.dimensionTypeId })?.value"/>
                    <set field="livingSizeUnit" from="dimensionList.find({ 'LivingSize' == it.dimensionTypeId })?.uomAbbreviation"/>
                </if>
                <!-- download Image -->
                <set field="loadImageFile" from="null"/>
                <set field="imageFile" from="null"/>
                <service-call name="awsServices.FrontEndServices.get#Image" in-map="[size:'large',productId:pcmp.productId]" out-map="loadImageFile"/>
                <if condition="loadImageFile.imageFile != null">
                    <set field="imageFile" from="loadImageFile.imageFile"/>
                </if>
                <script>productList.add([productId:pcmp.productId, pseudoId:product.pseudoId, productName:product.productName,
                    description:product.description, price:priceMap.price, listPrice:priceMap.listPrice, priceUomId:priceMap.priceUomId,
                    sequenceNum:pcmp.sequenceNum, smallImageInfo:smallImageInfo, mediumImageInfo:mediumImageInfo, numberBathrooms:numberBathrooms,
                    numberBedrooms:numberBedrooms, landSize:landSize, landSizeUnit:landSizeUnit, livingSize:livingSize, livingSizeUnit:livingSizeUnit,
                    imageFile:imageFile, latitude:latitude, longitude:longitude])</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="ProductInfo">
        <in-parameters>
            <parameter name="productStoreId" required="true"/>
            <parameter name="productId" required="true"/>
            <parameter name="priceUomId"/>
            <parameter name="locale"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters entity-name="mantle.product.Product" include="nonpk"/>

            <parameter name="price" type="BigDecimal"/>
            <parameter name="listPrice" type="BigDecimal"/>
            <parameter name="priceUomId"/>

            <parameter name="productClassDescription"/>
            <parameter name="descriptionLong"/>
            <parameter name="contentList" type="List"><parameter name="content" type="Map">
                <parameter name="productContentId"/><parameter name="productContentTypeEnumId"/>
                <parameter name="description"/><parameter name="sequenceNum"/>
            </parameter></parameter>

            <parameter name="standardFeatureList" type="List"><parameter name="dimension" type="Map"/></parameter>
            <parameter name="dimensionList" type="List"><parameter name="dimension" type="Map"/></parameter>
            <parameter name="listProductImage" type="List"></parameter>
            <parameter name="numberBathrooms"/>
            <parameter name="numberBedrooms"/>
            <parameter name="landSize"/>
            <parameter name="landSizeUnit"/>
            <parameter name="livingSize"/>
            <parameter name="livingSizeUnit"/>
            <parameter name="imageFile"/>
            <parameter name="longitude" type="BigDecimal"/>
            <parameter name="latitude" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
            <if condition="product == null"><return error="true" message="Product not found with ID ${productId}"/></if>
            <script>context.putAll(product)</script>

            <!-- Get geopoint of the product -->
            <entity-find-one entity-name="mantle.product.asset.AssetAndDetail" value-field="asset">
                <field-map field-name="productId" from="productId"/>
                <field-map field-name="statusId" from="'AstAvailable'"/>
            </entity-find-one>
            <if condition="asset?.geoPointId">
                <entity-find-one entity-name="moqui.basic.GeoPoint" value-field="geoPoint">
                    <field-map field-name="geoPointId" from="asset.geoPointId"/></entity-find-one>
                <set field="longitude" from="geoPoint.longitude"/>
                <set field="latitude" from="geoPoint.latitude"/>
            </if>

            <if condition="productStoreId">
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>
                <if condition="!priceUomId"><set field="priceUomId" from="productStore?.defaultCurrencyUomId"/></if>
                <set field="vendorPartyId" from="productStore?.organizationPartyId"/>
            </if>
            <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                          in-map="[productId:productId, priceUomId:priceUomId, productStoreId:productStoreId,
                        vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>
            <set field="price" from="priceMap.price"/>
            <set field="listPrice" from="priceMap.listPrice"/>
            <set field="priceUomId" from="priceMap.priceUomId"/>

            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="productClassEnum">
                <field-map field-name="enumId" from="product.productClassEnumId"/></entity-find-one>
            <set field="productClassDescription" from="productClassEnum?.description"/>

            <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="standardFeatureList" cache="true">
                <date-filter/><econdition field-name="productId"/>
                <econdition field-name="applTypeEnumId" value="PfatStandard"/>
                <order-by field-name="productFeatureTypeEnumId"/><order-by field-name="description"/>
            </entity-find>

            <entity-find entity-name="mantle.product.ProductDimensionAndType" list="dimensionList" cache="true">
                <econdition field-name="productId"/><order-by field-name="description"/></entity-find>
            <if condition="dimensionList">
                <set field="landSize" from="dimensionList.find({ 'LandSize' == it.dimensionTypeId })?.value"/>
                <set field="landSizeUnit" from="dimensionList.find({ 'LandSize' == it.dimensionTypeId })?.uomAbbreviation"/>
                <set field="livingSize" from="dimensionList.find({ 'LivingSize' == it.dimensionTypeId })?.value"/>
                <set field="livingSizeUnit" from="dimensionList.find({ 'LivingSize' == it.dimensionTypeId })?.uomAbbreviation"/>
            </if>

            <entity-find entity-name="mantle.product.ProductContent" list="contentList" cache="true">
                <date-filter/><econdition field-name="productId"/>
                <order-by field-name="sequenceNum,-fromDate"/>
            </entity-find>
            <if condition="locale">
                <!-- filter after by locale to streamline cached find -->
                <set field="langLocale" from="locale.contains('_') ? locale.substring(locale.indexOf('_')) : null"/>
                <set field="contentList" from="contentList.findAll({ it.locale == null || it.locale == locale || it.locale == langLocale })"/>
            </if>
            <!-- some content types may have more than one record, long description just has one -->
            <set field="descLongLocation" from="contentList.find({ 'PcntDescriptionLong' == it.productContentTypeEnumId })?.contentLocation"/>
            <if condition="descLongLocation"><set field="descriptionLong" from="ec.resource.getLocationText(descLongLocation, true)"/></if>
            <!-- Get number of bedrooms and bathrooms -->
            <set field="numberBedrooms" from="null"/>
            <set field="numberBathrooms" from="null"/>
            <set field="prodIdentList" from="null"/>
            <entity-find entity-name="mantle.product.ProductIdentification" list="prodIdentList">
                <econdition field-name="productIdTypeEnumId" operator="in"
                            value="PidtBathroom,PidtBedroom"/>
                <econdition field-name="productId"/>
            </entity-find>
            <if condition="prodIdentList">
                <set field="numberBathrooms" from="prodIdentList.find({ 'PidtBathroom' == it.productIdTypeEnumId })?.idValue"/>
                <set field="numberBedrooms" from="prodIdentList.find({ 'PidtBedroom' == it.productIdTypeEnumId })?.idValue"/>
            </if>
             <!-- Get List product image -->
             <set field="loadImageFile" from="null"/>
             <service-call name="awsServices.FrontEndServices.get#ImageDetailList" in-map="[productId:productId]" out-map="listProductImage"/>
             <if condition="listProductImage">
                 <set field="listProductImage" from="listProductImage"/>
             </if>
             <!-- download Image -->
             <set field="mainImageFile" from="null"/>
             <set field="imageFile" from="null"/>
             <service-call name="awsServices.FrontEndServices.get#Image" in-map="[size:'large',productId:productId]" out-map="mainImageFile"/>
             <if condition="mainImageFile.imageFile != null">
                 <set field="imageFile" from="mainImageFile.imageFile"/>
             </if>
        </actions>
    </service>

    <service verb="get" noun="Image">
        <in-parameters>
            <parameter name="size" required="true"/>
            <parameter name="productId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="imageFile"/>
        </out-parameters>
        <actions>
            <if condition="productId">
                <if condition="size == 'small'">
                    <set field="productContentTypeEnumId" value="PcntImageSmall"/></if>
                <if condition="size == 'medium'">
                    <set field="productContentTypeEnumId" value="PcntImageMedium"/></if>
                <if condition="size == 'large'">
                    <set field="productContentTypeEnumId" value="PcntImageLarge"/></if>
                <entity-find entity-name="mantle.product.ProductContent" list="productContents">
                    <econdition field-name="productId"/><econdition field-name="productContentTypeEnumId"/>
                        <date-filter/></entity-find>
                <if condition="productContents &amp;&amp; productContents[0].contentLocation">
                    <set field="contentLocation" from="productContents[0].contentLocation"/>
                </if>
            </if>
            <set field="imageFile" from="null"/>
            <if condition="contentLocation">
                <set field="resourceReference" from="ec.resource.getLocationReference(contentLocation)"/>
                <if condition="!resourceReference == null || !resourceReference.getExists()">
                    <log level="error" message="Could not find resource at [${contentLocation}]! should always be there!"/>
                    <else>
                        <set field="inputStream" from="resourceReference.openStream()"/>
                        <set field="docBytes" from="org.apache.commons.io.IOUtils.toByteArray(inputStream)"/>
                        <set field="imageFile" from="'data:image/png;base64,' + org.apache.commons.codec.binary.Base64.encodeBase64String(docBytes)"/>
                    </else>
                </if>
            </if>
        </actions>
    </service>

    <service verb="get" noun="ImageDetailList">
        <in-parameters>
            <parameter name="productId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="imageFileList" type="List"></parameter>
        </out-parameters>
        <actions>
            <if condition="productId">
                <set field="productContentTypeEnumId" value="PcntImageDetail,PcntImageLarge"/>
                <entity-find entity-name="mantle.product.ProductContent" list="productContentsList">
                    <econdition field-name="productId"/>
                    <econdition field-name="productContentTypeEnumId" operator="in" from="productContentTypeEnumId"/>
                    <date-filter/>
                    <order-by field-name="-productContentTypeEnumId,sequenceNum"/>
                 </entity-find>
            </if>
            <set field="imageFile" from="null"/>
            <set field="imageFileList" from="[]"/>
            <if condition="productContentsList">
                <iterate list="productContentsList" entry="productContent">
                    <set field="resourceReference" from="ec.resource.getLocationReference(productContent.contentLocation)"/>
                    <if condition="!resourceReference == null || !resourceReference.getExists()">
                        <log level="error" message="Could not find resource at [${productContent}]! should always be there!"/>
                        <else>
                            <set field="inputStream" from="resourceReference.openStream()"/>
                            <set field="docBytes" from="org.apache.commons.io.IOUtils.toByteArray(inputStream)"/>
                            <set field="imageFile" from="'data:image/png;base64,' + org.apache.commons.codec.binary.Base64.encodeBase64String(docBytes)"/>
                            <script>imageFileList.add(imageFile)</script>
                        </else>
                    </if>
                </iterate>
            </if>
        </actions>
    </service>

    <service verb="search" noun="Products">
        <in-parameters>
            <parameter name="searchParameter"/>
            <parameter name="productDataDocumentId"/>
            <parameter name="productCategoryId"/>
            <parameter name="productStoreId"/>
            <parameter name="productFeatureIds" type="List"><parameter name="productFeatureId"/></parameter>
            <parameter name="priceUomId"/>
            <parameter name="locale"/>
            <parameter name="orderByFields" type="List"><parameter name="orderByField"/></parameter>
            <parameter name="pageIndex" type="Integer" default="0"/>
            <parameter name="pageSize" type="Integer" default="20"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productList" type="List"><parameter name="productInfo" type="Map"/></parameter>
            <parameter name="productListCount" type="Integer"><description>The total count of hits, not just the limited number returned.</description></parameter>
            <parameter name="productListPageIndex" type="Integer"/>
            <parameter name="productListPageSize" type="Integer"/>
            <parameter name="productListPageMaxIndex" type="Integer"/>
            <parameter name="productListPageRangeLow" type="Integer"/>
            <parameter name="productListPageRangeHigh" type="Integer"/>
            <parameter name="searchParameter"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore" cache="true"/>
            <set field="productDataDocumentId" from="productStore?.productDataDocumentId"/>
            <if condition="productStoreId">
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore" cache="true"/>
                <if condition="!priceUomId"><set field="priceUomId" from="productStore?.defaultCurrencyUomId"/></if>
                <set field="vendorPartyId" from="productStore?.organizationPartyId"/>
            </if>

            <if condition="!productCategoryId &amp;&amp; productStoreId">
                <entity-find entity-name="mantle.product.store.ProductStoreCategory" list="searchPscList" cache="true">
                    <date-filter/><econdition field-name="productStoreId"/>
                    <econdition field-name="storeCategoryTypeEnumId" value="PsctSearch"/>
                </entity-find>
                <set field="productCategoryId" from="searchPscList?.first()?.productCategoryId"/>
                <if condition="!productCategoryId">
                    <entity-find entity-name="mantle.product.store.ProductStoreCategory" list="searchPscList" cache="true">
                        <date-filter/><econdition field-name="productStoreId"/>
                        <econdition field-name="storeCategoryTypeEnumId" value="PsctViewAllow"/>
                    </entity-find>
                    <set field="productCategoryId" from="searchPscList?.first()?.PsctSearch"/>
                </if>
            </if>
            <if condition="!productCategoryId"><return type="danger" message="No search category found for store ${productStoreId}"/></if>

            <!-- TODO/FUTURE: better handling of search input for more natural results -->
            <set field="queryString" from="searchParameter ? searchParameter.split(' ').collect({ (!it || it in ['AND', 'OR', 'NOT'] || it.contains('*')) ? it : it + '*' }).join(' ') : ''"/>
            <!-- NOTE: with ElasticSearch and a date range query like this there is a time zone issue, reliable by date but not exact time -->
            <set field="nowTimeLong" from="ec.user.nowTimestamp.time"/>
            <script><![CDATA[
                nestedQueryMap = [categories:"""{"bool":{"must":[ {"match":{"categories.productCategoryId":"${productCategoryId}"}},
                        {"range":{"categories.categoryFromDate":{"lte":${nowTimeLong}}}},
                        {"bool":{"should":[{"range":{"categories.categoryThruDate":{"gte":${nowTimeLong}}}}, {"bool":{"must_not":{"exists":{"field":"categories.categoryThruDate"}}}}]}}
                    ]}}"""]
            ]]></script>
            <!-- <log level="warn" message="productDataDocumentId: ${productDataDocumentId}\n queryString: ${queryString}\n nestedQueryMap: ${nestedQueryMap}"/> -->

            <entity-find-one entity-name="moqui.entity.document.DataDocument" value-field="productDataDocument" cache="true">
                <field-map field-name="dataDocumentId" from="productDataDocumentId"/></entity-find-one>
            <service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="productSearchOut"
                    in-map="[queryString:queryString, nestedQueryMap:nestedQueryMap, indexName:productDataDocument.indexName,
                        documentType:productDataDocument.dataDocumentId, pageIndex:pageIndex, pageSize:pageSize]"/>
            <set field="productList" from="productSearchOut.documentList"/>
            <set field="productListCount" from="productSearchOut.documentListCount"/>
            <set field="productListPageIndex" from="productSearchOut.documentListPageIndex"/>
            <set field="productListPageSize" from="productSearchOut.documentListPageSize"/>
            <set field="productListPageMaxIndex" from="productSearchOut.documentListPageMaxIndex"/>
            <set field="productListPageRangeLow" from="productSearchOut.documentListPageRangeLow"/>
            <set field="productListPageRangeHigh" from="productSearchOut.documentListPageRangeHigh"/>

            <!-- get prices, small/medium image info for products -->
            <iterate list="productList" entry="productInfo">
                <service-call name="awsServices.FrontEndServices.get#ProductInfo" out-map="productInfoCtx"
                          in-map="[productId:productInfo.productId, productStoreId:productStoreId]"/>
                <set field="productInfo.productName" from="productInfo.name"/>
                <set field="productInfo.price" from="productInfoCtx.price"/>
                <set field="productInfo.listPrice" from="productInfoCtx.listPrice"/>
                <set field="productInfo.priceUomId" from="productInfoCtx.priceUomId"/>
                <set field="productInfo.imageFile" from="productInfoCtx.imageFile"/>
            </iterate>
        </actions>
    </service>

</services>
