<?xml version="1.0" encoding="UTF-8" ?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="Companies">
        <out-parameters>
            <parameter name="companies"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="growerp.mobile.party.CompanyPreferenceAndClassification" list="parties">
                <econditions combine="or">
                    <econdition field-name="disabled" operator="not-equals" value="Y"/>
                    <econdition field-name="disabled" operator="is-null"/>
                </econditions>
            </entity-find>
            <set field="companies" from="[]" />
            <iterate list="parties" entry="party">
                <service-call name="growerp.100.PartyServices100.get#Company" out-map="context" in-map="[companyPartyId: party.partyId]"/>
                <script>companies.add(company)</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="Company">
        <in-parameters>
            <parameter name="companyPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="!companyPartyId &amp;&amp; ec.user.userAccount.partyId">
                <entity-find entity-name="mantle.party.PartyRelationship" list="relList"><!-- get from user -->
                    <date-filter/>
                    <econditions><econdition field-name="fromPartyId" from="ec.user.userAccount.partyId"/>
                    <econdition field-name="fromRoleTypeId" value="Employee"/>
                    <econdition field-name="toRoleTypeId" value="OrgInternal"/></econditions></entity-find>
                <set field="companyPartyId" from="relList[0].toPartyId"/>
            </if>
            <if condition="!companyPartyId"><return error="true" message="Company not supplied"/></if>
            <entity-find-one entity-name="growerp.mobile.party.CompanyPreferenceAndClassification" value-field="org">
                <field-map field-name="partyId" from="companyPartyId"/></entity-find-one>
            <if condition="!org"><return error="true" message="Company ${companyPartyId} not found!"/></if>
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                in-map="[partyId: companyPartyId]" out-map="context"/>
            <service-call name="growerp.100.ImageServices100.download#Image" 
                in-map="[size: 'small', type: 'company', id: companyPartyId]"
                out-map="context" />
            <set field="company" from="[
                partyId: companyPartyId,
                name: org.organizationName,
                classificationId: org.partyClassificationId,
                classificationDescr: org.description,
                email: emailAddress,
                currencyId: org.baseCurrencyUomId,
                image: imageFile]" />
        </actions>
    </service>

    <service verb="get" noun="User">
        <in-parameters>
            <parameter name="userPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="ec.user.userAccount.partyId == userPartyId || ec.user.hasPermission('GROWERP_M_COMPADMIN')">
                <entity-find-one entity-name="mantle.party.Person" value-field="person">
                    <field-map field-name="partyId" from="userPartyId" />
                </entity-find-one>
                <entity-find entity-name="moqui.security.UserAccount" list="accounts">
                    <econdition field-name="partyId" from="userPartyId" />
                </entity-find>
                <entity-find entity-name="mantle.party.PartyRole" list="fullRoles">
                    <econdition field-name="partyId"  from="userPartyId"/>
                </entity-find>
                <if condition="accounts">
                    <entity-find entity-name="moqui.security.UserGroupAndMember" list="groups">
                        <econdition field-name="userId" from="accounts[0].userId" />
                        <date-filter />
                    </entity-find>
                    <set field="emailAddress" from="accounts[0].emailAddress" />
                    <else>
                        <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                            in-map="[partyId: userPartyId]" out-map="context" />
                    </else>
                </if>
                <service-call name="growerp.100.ImageServices100.download#Image"
                    in-map="[size: 'small', type: 'user', id: userPartyId]" out-map="context" />
                <set field="roles" from="[]"/>
                <iterate list="fullRoles" entry="role">
                    <script>roles.add(role.roleTypeId)</script>
                </iterate>

                <set field="user" from="[
                    partyId: userPartyId,
                    userId: accounts? accounts[0].userId: null,
                    firstName: person?.firstName,
                    lastName: person?.lastName,
                    name: accounts? accounts[0].username: null,
                    email: emailAddress,
                    groupDescription: accounts?groups[0].description: null,
                    roles: roles,
                    userGroupId: accounts?groups[0].userGroupId: null,
                    locale: accounts?accounts[0].locale: null,
                    externalId: party?party.externalId: null,
                    image: imageFile]" />

                <else>
                    <return error="true" message="User ${ec.user.userAccount.partyId} does not have the GROWERP_M_COMPADMIN permission"/>
                </else>
            </if>

        </actions>
    </service>

    <service verb="register" noun="UserAndCompany" authenticate="anonymous-all">
        <description>
            registers with a minimal setup for a user with a given role to an existing company or when not provided
            will create an accounting organization with the provided name and currency
        </description>
        <in-parameters>
            <!-- user information -->
            <parameter name="firstName" required="true" />
            <parameter name="middleName" />
            <parameter name="lastName" required="true" />
            <parameter name="emailAddress" required="true">
                <text-email />
            </parameter>
            <parameter name="username" default="emailAddress" />
            <parameter name="newPassword" default="org.moqui.util.StringUtilities.getRandomString(6) + '9!'" />
            <parameter name="newPasswordVerify" default="newPassword" />
            <parameter name="groupDescription" /> <!--securitygroup description-->
            <parameter name="locale" />
            <!-- company information -->
            <parameter name="companyPartyId" /> <!-- add users for existing company -->
            <parameter name="companyName" />
            <parameter name="companyEmailAddress" default="emailAddress" />
            <parameter name="currencyUomId" />
            <parameter name="partyClassificationId" required="true" /> <!-- allocate party to mobile application -->
            <!-- default setup -->
            <parameter name="environment" />
            <parameter name="transData" type="List" /> <!-- [ 'kitchen','food','macaroni','bar','inside','garden','drinks','cola' -->
        </in-parameters>
        <out-parameters>
            <parameter name="user" />
            <parameter name="company" />
            <parameter name="partyId" />
        </out-parameters>
        <actions>
            <service-call name="mantle.party.PartyServices.create#Account" in-map="context + [roleTypeId: 'Employee', loginAfterCreate: false]" out-map="userAccount" />
            <if condition="userAccount.partyId != null">

                <if condition="companyPartyId == null">
                    <service-call name="mantle.party.PartyServices.create#Organization" in-map="context + [roleTypeId: 'OrgInternal',organizationName: companyName]" out-map="company" />
                    <set field="companyPartyId" from="company.partyId" />
                    <service-call name="mantle.party.ContactServices.create#EmailAddress" out-map="emailOut" in-map="[emailAddress:companyEmailAddress, partyId:companyPartyId, contactMechPurposeId:'EmailPrimary']" />
                    <service-call name="create#mantle.ledger.config.PartyAcctgPreference" in-map="[organizationPartyId: companyPartyId, baseCurrencyUomId: currencyUomId]" />
                    <entity-find-one entity-name="mantle.party.PartyClassification" value-field="partyClassification">
                        <field-map field-name="partyClassificationId" />
                    </entity-find-one>
                    <service-call name="create#mantle.party.PartyClassificationAppl" in-map="[partyId: companyPartyId, partyClassificationId: partyClassificationId]" />
                    <!-- create productStore -->
                    <service-call name="create#mantle.product.store.ProductStore" out-map="context" in-map="[organizationPartyId: companyPartyId,
                            requireInventory: 'N',
                            reservationOrderEnumId:'AsResAutoNone',
                            defaultCurrencyUomId: currencyUomId]" />
                    <!-- create root category -->
                    <set field="fromDate" from="ec.user.nowTimestamp" />
                    <service-call name="create#mantle.product.category.ProductCategory" out-map="rootCat" 
                        in-map="[ownerPartyId: companyPartyId, productCategoryTypeEnumId: 'PctRoot',
                            categoryName: 'Root category for: ' + partyClassification.description]" />
                    <service-call name="create#mantle.product.store.ProductStoreCategory" 
                        in-map="[productCategoryId: rootCat.productCategoryId, storeCategoryTypeEnumId: 'PsctBrowseRoot',
                            productStoreId: context.productStoreId, fromDate: fromDate]" />
                </if>
                <if condition="groupDescription">
                    <entity-find entity-name="moqui.security.UserGroup" list="userGroups">
                        <econdition field-name="description" from="groupDescription" />
                    </entity-find>
                    <if condition="userGroups">
                        <set field="userGroupId" from="userGroups[0].userGroupId" />
                    </if>
                </if>
                <if condition="!userGroupId">
                    <set field="userGroupId" value="GROWERP_M_EMPLOYEE" />
                </if>
                <!-- attach the user as an employee to the organization. -->
                <service-call name="create#mantle.party.PartyRelationship" in-map="[fromPartyId: userAccount.partyId, fromRoleTypeId: 'Employee', relationshipTypeEnumId: 'PrtEmployee',
                        fromDate: fromDate, toPartyId: companyPartyId, toRoleTypeId: 'OrgInternal']" />
                <!-- set company in as ACTIVE_ORGANIZATION UserPreference to be sure only this company can be looked at-->
                <service-call name="create#moqui.security.UserPreference" in-map="[userId: userAccount.userId, preferenceKey: 'ACTIVE_ORGANIZATION', preferenceValue: companyPartyId]" />
                <!-- setup the organization -->
                <service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" />
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                    <field-map field-name="emailTemplateId" value="WELCOME" />
                    <field-map field-name="toAddresses" from="emailAddress" />
                    <field-map field-name="bodyParameters" from="[classification: partyClassificationId.substring(3), newPassword:newPassword]" />
                </service-call>
                <if condition="company">
                    <!-- initial company/user needs login for loading default data (create#user calls this service)-->
                    <!-- add the user as admin -->
                    <service-call name="create#moqui.security.UserGroupMember" in-map="[userGroupId: 'GROWERP_M_ADMIN', userId: userAccount.userId]" />
                    <script>ec.user.loginUser(username, newPassword)</script>
                    <service-call name="growerp.100.PartyServices100.load#DefaultData" in-map="context" />
                    <else>
                        <!-- no need for logging when adding employees -->
                        <!-- add the user as an employee(or what is provided) to a security group -->
                        <service-call name="create#moqui.security.UserGroupMember" in-map="[userGroupId: userGroupId, userId: userAccount.userId]" />
                    </else>
                </if>
                <set field="user" from="[firstName: firstName, lastName: lastName, name: emailAddress, email: emailAddress]" />
                <service-call name="growerp.100.PartyServices100.get#User" in-map="[userPartyId: userAccount.partyId]" out-map="context"/>
                <service-call name="growerp.100.PartyServices100.get#Company" in-map="[companyPartyId: companyPartyId]" out-map="context"/>
            </if>
        </actions>
    </service>
    <!--internal service used in register -->
    <service verb="load" noun="DefaultData" authenticate="anonymous-all">
        <!-- not reachable outside -->
        <in-parameters>
            <parameter name="currencyUomId"/>
            <parameter name="partyClassificationId" required="true" />
            <parameter name="environment" />
            <parameter name="transData" type="List" default="['kitchen','food','macaroni','bar','inside','garden','drinks','cola']"/>
        </in-parameters>
        <actions>
            <log message="============data: ${transData}"/>
            <if condition="partyClassificationId == 'AppEcommerceShop'">
                <service-call name="growerp.100.CatgProdServices100.create#ProductCategory" in-map="[
                    categoryName: transData[1], preparationAreaId: preparationAreaId]" out-map="context" /> <!-- food -->
                <service-call name="create#ProductCategoryContent" in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/foodSmall.png']" />
                <service-call name="create#ProductCategoryContent" in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/foodMedium.png']" />
                <service-call name="growerp.mobile.MobileCatgProdServices.create#Product" in-map="[
                    productName: transData[2], productCategoryId: productCategoryId, price: '10.00',
                    currencyId: currencyUomId]" out-map="context" /> <!-- macaroni-->
                <service-call name="create#ProductContent" in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageSmall',
                    contentLocation: 'dbresource://GrowERP/images/macaroniSmall.png']" />
                <service-call name="create#ProductContent" in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/macaroniMedium.png']" />
                <service-call name="growerp.100.CatgProdServices100.create#ProductCategory" in-map="[
                    categoryName: transData[6]]" out-map="context" /> <!-- drinks -->
                <service-call name="create#ProductCategoryContent" in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/drinksSmall.png']" />
                <service-call name="create#ProductCategoryContent" in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/drinksMedium.png']" />
                <service-call name="growerp.mobile.MobileCatgProdServices.create#Product" in-map="[
                    productName: transData[7], productCategoryId: productCategoryId, price: '15.00', 
                    currencyId: currencyUomId]" out-map="context" /> <!-- macaroni-->
                <service-call name="create#ProductContent" in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageSmall',
                    contentLocation: 'dbresource://GrowERP/images/colaSmall.png']" />
                <service-call name="create#ProductContent" in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/colaMedium.png']" />
            </if>
            <if condition="partyClassificationId == 'AppRestaurant'">
                <!-- billing -->
                <service-call name="growerp.mobile.MobileLocationServices.create#PreparationArea" in-map="[description: transData[8]]" out-map="context" />
                <service-call name="create#PreparationAreaContent" in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/billingSmall.png']" />
                <service-call name="create#PreparationAreaContent" in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/billingMedium.png']" />
                <!-- kitchen -->
                <service-call name="growerp.mobile.MobileLocationServices.create#PreparationArea" in-map="[description: transData[0]]" out-map="context" />
                <service-call name="create#PreparationAreaContent" in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/kitchenSmall.png']" />
                <service-call name="create#PreparationAreaContent" in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/kitchenMedium.png']" />
                <service-call name="growerp.100.MobileCatgProdServices100.create#ProductCategory" in-map="[
                    categoryName: transData[1], preparationAreaId: preparationAreaId]" out-map="context" /> <!-- food -->
                <service-call name="create#ProductCategoryContent" in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/foodSmall.png']" />
                <service-call name="create#ProductCategoryContent" in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/foodMedium.png']" />
                <service-call name="growerp.mobile.MobileCatgProdServices.create#Product" in-map="[
                    productName: transData[2], productCategoryId: productCategoryId, price: '10.00',
                    currencyId: currencyUomId]" out-map="context" /> <!-- macaroni-->
                <service-call name="create#ProductContent" in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageSmall',
                    contentLocation: 'dbresource://GrowERP/images/macaroniSmall.png']" />
                <service-call name="create#ProductContent" in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/macaroniMedium.png']" />
                <!-- bar -->
                <service-call name="growerp.mobile.MobileLocationServices.create#PreparationArea" in-map="[description: transData[3]]" out-map="context" />
                <service-call name="create#PreparationAreaContent" in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/barSmall.png']" />
                <service-call name="create#PreparationAreaContent" in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/barMedium.png']" />
                <service-call name="growerp.100.CatgProdServices100.create#ProductCategory" in-map="[
                    categoryName: transData[6], preparationAreaId: preparationAreaId]" out-map="context" /> <!-- drinks -->
                <service-call name="create#ProductCategoryContent" in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/drinksSmall.png']" />
                <service-call name="create#ProductCategoryContent" in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/drinksMedium.png']" />
                <service-call name="growerp.mobile.MobileCatgProdServices.create#Product" in-map="[
                    productName: transData[7], productCategoryId: productCategoryId, price: '15.00', 
                    currencyId: currencyUomId]" out-map="context" /> <!-- macaroni-->
                <service-call name="create#ProductContent" in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageSmall',
                    contentLocation: 'dbresource://GrowERP/images/colaSmall.png']" />
                <service-call name="create#ProductContent" in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/colaMedium.png']" />

                <service-call name="growerp.mobile.MobileLocationServices.create#AccommodationArea" in-map="[description: transData[4], nbrOfSpots: 10]" out-map="context" />
                <service-call name="create#AccommodationAreaContent" in-map="[
                    accommodationAreaId: accommodationAreaId, accommodationAreaContentTypeEnumId: 'AactImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/insideSmall.png']" />
                <service-call name="create#AccommodationAreaContent" in-map="[
                    accommodationAreaId: accommodationAreaId, accommodationAreaContentTypeEnumId: 'AactImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/insideMedium.png']" />

                <service-call name="growerp.mobile.MobileLocationServices.create#AccommodationArea" in-map="[description: transData[5], nbrOfSpots: 15]" out-map="context" />
                <service-call name="create#AccommodationAreaContent" in-map="[
                    accommodationAreaId: accommodationAreaId, accommodationAreaContentTypeEnumId: 'AactImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/gardenSmall.png']" />
                <service-call name="create#AccommodationAreaContent" in-map="[
                    accommodationAreaId: accommodationAreaId, accommodationAreaContentTypeEnumId: 'AactImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/gardenMedium.png']" />

                <if condition="environment != 'production'">
                    <service-call name="growerp.100.MobilePartyServices100.get#Company" out-map="context" />
                    <set field="random" value="${org.moqui.util.StringUtilities.getRandomString(8)}" />
                    <service-call name="growerp.mobile.MobilePartyServices.create#User" in-map="[
                        firstName: 'Peter', lastName: 'Coster', companyPartyId: company.partyId,
                        emailAddress: random.toLowerCase() + '@example.com',
                        roleTypeId: 'Employee', groupDescription: 'Employee']" out-map="context" />
                    <service-call name="growerp.mobile.MobileTaskRequestServices.create#WorkEffort" in-map="[workEffortName:'This a first task for Peter',
                        partyId: partyId, priority: '5']" />
                    <service-call name="growerp.mobile.MobileTaskRequestServices.create#WorkEffort" in-map="[workEffortName:'This a first task for me',
                        priority: '5']" />
                    <entity-find entity-name="PreparationArea" list="prepAreas">
                        <econdition field-name="ownerPartyId" from="company.partyId" />
                    </entity-find>
                    <set field="index" value="0" type="Integer" />
                    <iterate list="prepAreas" entry="prepArea">
                        <!-- setup up ports for virtual escpos printers -->
                        <service-call name="growerp.mobile.MobileLocationServices.update#PreparationArea" in-map="[preparationAreaId: prepArea.preparationAreaId, description: prepArea.description, printerIp: ':' + (9100 + index++)]" />
                    </iterate>
                </if>
            </if>
        </actions>
    </service>

</services>