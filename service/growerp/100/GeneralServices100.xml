<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any 
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="CurrencyList">
        <description>
            Get currency list for registration.
        </description>
        <out-parameters>
            <parameter name="currencyList" type="List"><parameter name="currencyInfo" type="Map"/></parameter>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.basic.Uom" list="allCurrencyList">
                <econdition field-name="uomTypeEnumId" value="UT_CURRENCY_MEASURE"/><order-by field-name="description"/>
            </entity-find>
            <set field="currencyList" from="[]"/>
            <iterate entry="currencyCtx" list="allCurrencyList">
                <set field="currencyInfo" from="[:]"></set>
                <set field="currencyInfo.value" from="currencyCtx.uomId"/>
                <set field="currencyInfo.display" value="${currencyCtx.description} [${currencyCtx.abbreviation}]"/>
                <script>currencyList.add(currencyInfo)</script>
            </iterate>
        </actions>
    </service>

    <service verb="login" noun="User" authenticate="anonymous-all"><description>service to return and apikey if user/password ok, when not check for a reset password</description>
        <in-parameters>
            <parameter name="username" required="true"/><parameter name="password" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="apiKey"/>
            <parameter name="moquiSessionToken"/>
            <parameter name="user" type="Map"/>
            <parameter name="company" type="Map"/>
            <parameter name="passwordChange" default="false"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" cache="false">
                <field-map field-name="username"/></entity-find-one>
            <set field="oldPassword" from="password"/>
            <if condition="!userAccount"><return error="true" message="cannot find username: ${username}" public="true"/></if>
            <script>
                def token = new org.apache.shiro.authc.UsernamePasswordToken((String) userAccount.username, (String) oldPassword)
                def info = new org.apache.shiro.authc.SimpleAuthenticationInfo(userAccount.username, userAccount.currentPassword,
                        userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null, "moquiRealm")
            </script>
            <if condition="!userAccount.currentPassword || !ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64)).doCredentialsMatch(token, info)">
                <if condition="userAccount.resetPassword">
                    <!-- try the resetPassword -->
                    <script>
                        info = new org.apache.shiro.authc.SimpleAuthenticationInfo(userAccount.username, userAccount.resetPassword,
                                userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null, "moquiRealm")
                    </script>
                    <if condition="ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64)).doCredentialsMatch(token, info)">
                        <set field="passwordChange" value="true"/>
                    </if>
                </if>
            </if>
            <if condition="!passwordChange">
                <script>ec.user.loginUser(username, password)</script>
                <service-call name="growerp.100.PartyServices100.get#UserAndCompany" out-map="context"/>
                <set field="apiKey" from="ec.user.getLoginKey()"/>
                <set field="moquiSessionToken" from="ec.web.sessionToken"/>
            </if>
        </actions>
    </service>

    <service verb="reset" noun="Password" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="username"/>
        </in-parameters>
        <out-parameters>
            <parameter name="response"/>
        </out-parameters>
        <actions>
            <service-call name="org.moqui.impl.UserServices.reset#Password" in-map="[username: username]"
                out-map="response"/>
        </actions>
    </service>

     <service verb="update" noun="Password"><description>Change the password of an account and re-enable also used with reset password logged off</description>
        <in-parameters>
            <parameter name="username" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="oldPassword" default-value="dummy"/>
        </in-parameters>
        <actions>
            <if condition="ec.user.userAccount"><!-- only possible with a loggedin user -->
                <service-call name="growerp.100.CommonServices100.get#RelatedCompanyPartyId" out-map="context" />
                <!-- make sure that username is only searched for in the logged in user own company -->
                <entity-find entity-name="growerp.mobile.CompanyPersonAndLogin" list="accounts">
                    <econdition field-name="username"/><econdition field-name="toPartyId" from="ownerPartyId"/></entity-find>
                <if condition="!accounts"><return error="true" message="cannot find username: ${username}" public="true"/></if>
            </if>
            <service-call name="org.moqui.impl.UserServices.update#Password"
                 in-map="[username: username, oldPassword: oldPassword, newPassword: newPassword, newPasswordVerify: newPassword]"/>
            <!-- enable useraccount -->
            <service-call name="update#moqui.security.UserAccount"
                    in-map="[username:username, disabled:'N', disabledDateTime:null, successiveFailedLogins:0]"/>
        </actions>
    </service>

    <service verb="register" noun="UserAndCompany" authenticate="anonymous-all">
        <description>
            registers with a minimal setup for a user with a given role to an existing company or when not provided
            will create an accounting organization with the provided name and currency
        </description>
        <in-parameters>
            <!-- user information -->
            <parameter name="firstName" required="true"/><parameter name="middleName"/><parameter name="lastName" required="true"/>
            <parameter name="emailAddress" required="true"><text-email/></parameter>
            <parameter name="username" default="emailAddress"/>
            <parameter name="newPassword" default="org.moqui.util.StringUtilities.getRandomString(6) + '9!'"/>
            <parameter name="newPasswordVerify" default="newPassword"/>
            <parameter name="groupDescription"/><!--securitygroup description-->
            <parameter name="locale"/>
            <!-- company information -->
            <parameter name="companyPartyId"/><!-- add users for existing company -->
            <parameter name="companyName"/>
            <parameter name="companyEmailAddress" default="emailAddress"/>
            <parameter name="currencyUomId"/>
            <parameter name="partyClassificationId" required="true"/><!-- allocate party to mobile application -->
            <!-- default setup -->
            <parameter name="environment"/>
            <parameter name="transData" type="List"/><!-- [ 'kitchen','food','macaroni','bar','inside','garden','drinks','cola' -->
        </in-parameters>
        <out-parameters>
            <parameter name="user"/>
            <parameter name="company"/>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.party.PartyServices.create#Account"
                in-map="context + [roleTypeId: 'Employee', loginAfterCreate: false]"
                out-map="userAccount"/>
            <if condition="userAccount.partyId != null">
                
                <if condition="companyPartyId == null">
                    <service-call name="mantle.party.PartyServices.create#Organization"
                        in-map="context + [roleTypeId: 'OrgInternal',organizationName: companyName]"
                        out-map="company"/>
                    <set field="companyPartyId" from="company.partyId"/>
                    <service-call name="mantle.party.ContactServices.create#EmailAddress" out-map="emailOut"
                        in-map="[emailAddress:companyEmailAddress, partyId:companyPartyId, contactMechPurposeId:'EmailPrimary']"/>
                    <service-call name="create#mantle.ledger.config.PartyAcctgPreference"
                        in-map="[organizationPartyId: companyPartyId, baseCurrencyUomId: currencyUomId]"/>
                    <!-- register as a restaurant App user -->
                    <service-call name="create#mantle.party.PartyClassificationAppl"
                        in-map="[partyId: companyPartyId, partyClassificationId: 'AppRestaurant']"/>
                    <!-- create productStore -->
                    <set field="productCategoryTypeEnumId" value="PctCatalog"/><!-- Default product category type -->
                    <if condition="partyClassificationId == 'AppRestaurant'">
                        <then>
                            <set field="productCategoryTypeEnumId" value="PctRestaurant"/>
                            <set field="categoryName" value="Restaurant company root category"/>
                        </then>
                        <else-if condition="partyClassificationId == 'AppShop'">
                            <set field="categoryName" value="Shop company root category"/>
                        </else-if>
                        <else-if condition="partyClassificationId == 'AppService'">
                            <set field="categoryName" value="Service company root category"/>
                        </else-if>
                    </if>
                    <service-call name="create#mantle.product.store.ProductStore" out-map="context"
                        in-map="[organizationPartyId: companyPartyId,
                            requireInventory: 'N',
                            reservationOrderEnumId:'AsResAutoNone',
                            defaultCurrencyUomId: currencyUomId]"/>
                    <!-- create root category -->
                    <set field="fromDate" from="ec.user.nowTimestamp"/>
                    <service-call name="create#mantle.product.category.ProductCategory" out-map="rootCat"
                        in-map="[ownerPartyId: companyPartyId, productCategoryTypeEnumId: productCategoryTypeEnumId,
                            categoryName: categoryName]"/>
                    <service-call name="create#mantle.product.store.ProductStoreCategory" in-map="[productCategoryId: rootCat.productCategoryId, storeCategoryTypeEnumId: 'PsctBrowseRoot',
                            productStoreId: context.productStoreId, fromDate: fromDate]"/>
                </if>
                <if condition="groupDescription">
                    <entity-find entity-name="moqui.security.UserGroup" list="userGroups">
                        <econdition field-name="description" from="groupDescription"/></entity-find>
                    <if condition="userGroups">
                        <set field="userGroupId" from="userGroups[0].userGroupId"/></if></if>
                <if condition="!userGroupId">
                    <set field="userGroupId" value="GROWERP_M_EMPLOYEE"/></if> 
                <!-- attach the user as an employee to the organization. -->
                <service-call name="create#mantle.party.PartyRelationship"
                    in-map="[fromPartyId: userAccount.partyId, fromRoleTypeId: 'Employee', relationshipTypeEnumId: 'PrtEmployee',
                        fromDate: fromDate, toPartyId: companyPartyId, toRoleTypeId: 'OrgInternal']"/>
                <!-- set company in as ACTIVE_ORGANIZATION UserPreference to be sure only this company can be looked at-->
                <service-call name="create#moqui.security.UserPreference"
                    in-map="[userId: userAccount.userId, preferenceKey: 'ACTIVE_ORGANIZATION', preferenceValue: companyPartyId]"/>
                <!-- setup the organization -->
                <service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo"/>
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                    <field-map field-name="emailTemplateId" value="WELCOME"/>
                    <field-map field-name="toAddresses" from="emailAddress"/>
                    <field-map field-name="bodyParameters" 
                        from="[classification: partyClassificationId.substring(3), newPassword:newPassword]"/>
                </service-call>
                <if condition="company"><!-- initial company/user needs login for loading default data (create#user calls this service)-->
                    <!-- add the user as admin -->
                    <service-call name="create#moqui.security.UserGroupMember"
                        in-map="[userGroupId: 'GROWERP_M_ADMIN', userId: userAccount.userId]"/>
                    <script>ec.user.loginUser(username, newPassword)</script>
                    <service-call name="growerp.100.GeneralServices100.load#DefaultData" async="true" in-map="context"/>
                    <else><!-- no need for logging when adding employees -->
                        <!-- add the user as an employee(or what is provided) to a security group -->
                        <service-call name="create#moqui.security.UserGroupMember"
                        in-map="[userGroupId: userGroupId, userId: userAccount.userId]"/>
                    </else>
                </if>
                <set field="user" from="[firstName: firstName, lastName: lastName, name: emailAddress, email: emailAddress]"/>
                <set field="company" from="[name: companyName]"/>
            </if>
        </actions>
    </service>
    <!--internal service used in register -->
    <service verb="load" noun="DefaultData" authenticate="anonymous-all"><!-- not reachable outside -->
        <in-parameters>
            <parameter name="partyClassificationId" required="true"/>
            <parameter name="environment"/>
            <parameter name="transData" type="List"/><!-- [ 'kitchen','food','macaroni','bar','inside','garden','drinks','cola' -->
        </in-parameters>
        <actions>
            <if condition="partyClassificationId == 'AppHotel'">
                <log message="TODO: ============create hotel data here...."/>
            </if>
            <if condition="partyClassificationId == 'AppRestaurant'">
                    <!-- billing -->
            <service-call name="growerp.mobile.MobileLocationServices.create#PreparationArea" 
                in-map="[description: transData[8]]" out-map="context"/>
            <service-call name="create#PreparationAreaContent"
                in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/billingSmall.png']"/>
            <service-call name="create#PreparationAreaContent"
                in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/billingMedium.png']"/>
            <!-- kitchen -->
            <service-call name="growerp.mobile.MobileLocationServices.create#PreparationArea" 
                in-map="[description: transData[0]]" out-map="context"/>
            <service-call name="create#PreparationAreaContent"
                in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/kitchenSmall.png']"/>
            <service-call name="create#PreparationAreaContent"
                in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/kitchenMedium.png']"/>
            <service-call name="growerp.mobile.MobileCatgProdServices.create#ProductCategory"
                in-map="[
                    categoryName: transData[1], preparationAreaId: preparationAreaId]" out-map="context"/><!-- food -->
            <service-call name="create#ProductCategoryContent"
                in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/foodSmall.png']"/>
            <service-call name="create#ProductCategoryContent"
                in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/foodMedium.png']"/>
            <service-call name="growerp.mobile.MobileCatgProdServices.create#Product"
                in-map="[
                    productName: transData[2], productCategoryId: productCategoryId, price: '10.00']" out-map="context"/><!-- macaroni-->
            <service-call name="create#ProductContent"
                in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageSmall',
                    contentLocation: 'dbresource://GrowERP/images/macaroniSmall.png']"/>
            <service-call name="create#ProductContent"
                in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/macaroniMedium.png']"/>
            <!-- bar -->
            <service-call name="growerp.mobile.MobileLocationServices.create#PreparationArea"
                in-map="[description: transData[3]]" out-map="context"/>
            <service-call name="create#PreparationAreaContent"
                in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/barSmall.png']"/>
            <service-call name="create#PreparationAreaContent"
                in-map="[
                    preparationAreaId: preparationAreaId, preparationAreaContentTypeEnumId: 'PactImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/barMedium.png']"/>
            <service-call name="growerp.mobile.MobileCatgProdServices.create#ProductCategory"
                in-map="[
                    categoryName: transData[6], preparationAreaId: preparationAreaId]" out-map="context"/><!-- drinks -->
            <service-call name="create#ProductCategoryContent"
                in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/drinksSmall.png']"/>
            <service-call name="create#ProductCategoryContent"
                in-map="[
                    productCategoryId: productCategoryId, categoryContentTypeEnumId: 'PcctImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/drinksMedium.png']"/>
            <service-call name="growerp.mobile.MobileCatgProdServices.create#Product"
                in-map="[
                    productName: transData[7], productCategoryId: productCategoryId, price: '15.00']" out-map="context"/><!-- macaroni-->
            <service-call name="create#ProductContent"
                in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageSmall',
                    contentLocation: 'dbresource://GrowERP/images/colaSmall.png']"/>
            <service-call name="create#ProductContent"
                in-map="[
                    productId: productId, productContentTypeEnumId: 'PcntImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/colaMedium.png']"/>

            <service-call name="growerp.mobile.MobileLocationServices.create#AccommodationArea"
                in-map="[description: transData[4], nbrOfSpots: 10]" out-map="context"/>
            <service-call name="create#AccommodationAreaContent"
                in-map="[
                    accommodationAreaId: accommodationAreaId, accommodationAreaContentTypeEnumId: 'AactImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/insideSmall.png']"/>
            <service-call name="create#AccommodationAreaContent"
                in-map="[
                    accommodationAreaId: accommodationAreaId, accommodationAreaContentTypeEnumId: 'AactImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/insideMedium.png']"/>

            <service-call name="growerp.mobile.MobileLocationServices.create#AccommodationArea"
                 in-map="[description: transData[5], nbrOfSpots: 15]" out-map="context"/>
            <service-call name="create#AccommodationAreaContent"
                in-map="[
                    accommodationAreaId: accommodationAreaId, accommodationAreaContentTypeEnumId: 'AactImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/gardenSmall.png']"/>
            <service-call name="create#AccommodationAreaContent"
                in-map="[
                    accommodationAreaId: accommodationAreaId, accommodationAreaContentTypeEnumId: 'AactImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/gardenMedium.png']"/>

            <if condition="environment != 'production'">
                <service-call name="growerp.mobile.MobilePartyServices.get#Company" out-map="context"/>
                <set field="random" value="${org.moqui.util.StringUtilities.getRandomString(8)}"/>
                <service-call name="growerp.mobile.MobilePartyServices.create#User" in-map="[
                        firstName: 'Peter', lastName: 'Coster', companyPartyId: company.partyId,
                        emailAddress: random.toLowerCase() + '@example.com',
                        roleTypeId: 'Employee', groupDescription: 'Employee']"
                        out-map="context"/>
                <service-call name="growerp.mobile.MobileTaskRequestServices.create#WorkEffort" 
                    in-map="[workEffortName:'This a first task for Peter',
                        partyId: partyId, priority: '5']"/>
                <service-call name="growerp.mobile.MobileTaskRequestServices.create#WorkEffort"
                    in-map="[workEffortName:'This a first task for me',
                        priority: '5']"/>
                <entity-find entity-name="PreparationArea" list="prepAreas">
                    <econdition field-name="ownerPartyId" from="company.partyId"/>
                </entity-find>
                <set field="index" value="0" type="Integer"/>
                <iterate list="prepAreas" entry="prepArea"><!-- setup up ports for virtual escpos printers -->
                   <service-call name="growerp.mobile.MobileLocationServices.update#PreparationArea"
                   in-map="[preparationAreaId: prepArea.preparationAreaId, description: prepArea.description, printerIp: ':' + (9100 + index++)]"/>
                </iterate>
            </if>
         </if>
        </actions>
    </service>

</services>
