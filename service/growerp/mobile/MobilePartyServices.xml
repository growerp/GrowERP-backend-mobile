<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="CurrentEmployeeUserGroupId">
        <out-parameters>
            <parameter name="currentEmployeeUserGroupId"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="moqui.security.UserGroupAndMember" list="groupList">
                <econdition field-name="userId" from="ec.user.userAccount.userId"/>
                <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/><date-filter/></entity-find>
            <set field="currentEmployeeUserGroupId" from="groupList[0].userGroupId"/>
            <log message="====sending current user groupId: ${currentEmployeeUserGroupId}"/>
        </actions>
    </service>
 
    <service verb="get" noun="AllPartyInfo">
        <description>
            Get all party information of the company the logged in user belongs to
        </description>
        <out-parameters>
            <parameter name="employees"/>
            <parameter name="customers"/>
            <parameter name="currentEmployeePartyId"/>
            <parameter name="company"/>
            <parameter name="userGroups"/>
        </out-parameters>
        <actions>
            <!--  company and party -->
            <service-call name="growerp.mobile.MobilePartyServices.get#Company" out-map="context"/>
            <set field="currentEmployeePartyId" from="ec.user.userAccount.partyId"/>
            <entity-find entity-name="mantle.party.PartyRelationship" list="relList">
                <date-filter/>
                <econdition field-name="fromPartyId" from="ec.user.userAccount.partyId"/>
                <econdition field-name="fromRoleTypeId" value="Employee"/>
                <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                <econdition field-name="toPartyId" from="company.partyId"/>
                </entity-find>
            <entity-find-one entity-name="mantle.party.Organization" value-field="org">
                <field-map field-name="partyId" from="company.partyId"/></entity-find-one>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="pref">
                <field-map field-name="organizationPartyId" from="company.partyId"/></entity-find-one>
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                in-map="[partyId: company.partyId]" out-map="context"/>
            <set field="company" from="[
                partyId: company.partyId,
                organizationName: org.organizationName,
                emailAddress: emailAddress,
                currencyId: pref.baseCurrencyUomId
                ]"/>
            <!-- employees & customers-->
            <set field="employees" from="[]"/>
            <set field="customers" from="[]"/>
            <entity-find entity-name="CompanyPersonAndLogin"  list="userInfos">
                <econdition field-name="toPartyId" from="company.partyId"/>
                <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                <order-by field-name="lastName"/><order-by field-name="firstName"/>
            </entity-find>
            <iterate entry="userInfo" list="userInfos">
                <set field="imageFile" value=""/>
                <service-call name="growerp.mobile.MobileRestServices.download#Image"
                    in-map="[size: partyId?'medium':'small', type: 'user', id: userInfo.fromPartyId]" out-map="context"/>
                <set field="email" from="userInfo.emailAddress"/>
                <entity-find entity-name="moqui.security.UserGroupAndMember" list="groupList">
                    <econdition field-name="userId" from="userInfo.userId"/>
                    <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/><date-filter/></entity-find>
                <if condition="userInfo.fromRoleTypeId =='Employee'"> 
                    <set field="employee" from="[
                        roleTypeId: userInfo.fromRoleTypeId,
                        partyId: userInfo.fromPartyId,
                        emailAddress: userInfo.emailAddress,
                        username: userInfo.username,
                        firstName: userInfo.firstName,
                        lastName: userInfo.lastName,
                        userGroupId: userInfo.userId? groupList[0].userGroupId: null,
                        groupDescription: userInfo.userId? groupList[0].description: null,
                        image: imageFile]"/>
                    <script>employees.add(employee)</script></if>
                <if condition="userInfo.fromRoleTypeId =='Customer'">
                    <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                            in-map="[partyId: userInfo.fromPartyId]" out-map="context"/>
                    <set field="email" from="emailAddress"/>
                    <set field="customer" from="[
                        roleTypeId: userInfo.fromRoleTypeId,
                        partyId: userInfo.fromPartyId,
                        emailAddress: emailAddress,
                        firstName: userInfo.firstName,
                        lastName: userInfo.lastName,
                        externalId: userInfo.externalId,
                        image: imageFile]"/>
                    <script>customers.add(customer)</script></if>
            </iterate>
            <!-- usergroups -->
             <entity-find entity-name="moqui.security.UserGroup" list="groupValues">
                <econdition field-name="userGroupId" operator="not-equals" value="GROWERP_M_SYSTEM"/>
                <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/></entity-find>
            <set field="userGroups" from="[]"/>
            <iterate entry="group" list="groupValues">
                <set field="value" from="[userGroupId: group.userGroupId, description: group.description]"/>
                <script>userGroups.add(value)</script>
            </iterate>
            <script>
                employees.sort{a, b -> (a.lastName + a.firstName).compareToIgnoreCase(b.lastName + b.firstName) }
                customers.sort{a, b -> (a.lastName + a.firstName).compareToIgnoreCase(b.lastName + b.firstName) }
            </script>
            
            <log message="===All party services ended, employees : ${employees.size()},  customers: ${customers.size()} 
                usergroups: ${userGroups?userGroups.size():0}, 
                company: ${company.organizationName} current employee partyId : ${currentEmployeePartyId}"/>
        </actions>
    </service>
    
    <service verb="get" noun="Users">
        <description>
            Get all users of the company they belong to
        </description>
        <in-parameters>
            <parameter name="partyId"/>
            <parameter name="full" type="Boolean" default-value="true"/>
            <parameter name="roleTypeId" default-value="Employee"/>
        </in-parameters>
        <out-parameters><parameter name="users" type="List"><parameter name="userInfo" type="Map"/></parameter></out-parameters>
        <actions>
            <if condition="partyId == '0'"><!-- get logged in user -->
                <set field="partyId" from="ec.user.userAccount.partyId"/></if>
            <set field="users" from="[]"/>
            <service-call name="growerp.mobile.MobilePartyServices.get#Company" out-map="context"/>
            <entity-find entity-name="CompanyPersonAndLogin"  list="userInfos">
                <econdition field-name="fromRoleTypeId" from="roleTypeId"/>
                <econdition field-name="toPartyId" from="company.partyId"/>
                <econdition field-name="fromPartyId" from="partyId" ignore-if-empty="true"/>
                <order-by field-name="lastName"/><order-by field-name="firstName"/>
            </entity-find>
            <iterate entry="userInfo" list="userInfos">
                <!-- if condition="!partyId &amp;&amp; userInfo.fromPartyId == ec.user.userAccount.partyId"><continue/></if-->
                <set field="imageFile" value=""/>
                <if condition="full == true">
                    <service-call name="growerp.mobile.MobileRestServices.download#Image"
                        in-map="[size: partyId?'medium':'small', type: 'user', id: userInfo.fromPartyId]" out-map="context"/>
                    <set field="email" from="userInfo.emailAddress"/>
                    <if condition="roleTypeId == 'Employee'">
                        <entity-find entity-name="moqui.security.UserGroupAndMember" list="groupList">
                            <econdition field-name="userId" from="userInfo.userId"/>
                            <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/><date-filter/></entity-find></if>
                    <if condition="!email">
                        <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                            in-map="[partyId: userInfo.fromPartyId]" out-map="context"/>
                        <set field="email" from="emailAddress"/></if>
                    <set field="user" from="[
                        partyId: userInfo.fromPartyId,
                        email: email,
                        username: userInfo.username,
                        firstName: userInfo.firstName,
                        lastName: userInfo.lastName,
                        userId: userInfo.userId? userInfo.userId: null,
                        userGroupId: userInfo.userId? groupList[0].userGroupId: null,
                        groupDescription: userInfo.userId? groupList[0].description: null,
                        externalId: userInfo.externalId,
                        image: imageFile]"/>
                <else>
                    <if condition="roleTypeId == 'Customer'">
                        <set field="user" from="userInfo.externalId + ' ' + userInfo.firstName + ' ' + userInfo.lastName"/></if>
                    <if condition="roleTypeId == 'Employee'">
                        <set field="user" from="[partyId: userInfo.fromPartyId, firstName: userInfo.firstName, lastName: userInfo.lastName]"/></if>
                </else></if>
                <script>users.add(user)</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="UserGroups">
        <description>task
            Get possible values of security usergroups
        </description>
        <out-parameters><parameter name="userGroups" type="List"><parameter name="userGroupInfo" type="Map"/></parameter></out-parameters>
        <actions>
            <entity-find entity-name="moqui.security.UserGroup" list="groupValues">
                <econdition field-name="userGroupId" operator="not-equals" value="GROWERP_M_SYSTEM"/>
                <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/></entity-find>
            <set field="userGroups" from="[]"/>
            <iterate entry="group" list="groupValues">
                <set field="value" from="[userGroupId: group.userGroupId, description: group.description]"/>
                <script>userGroups.add(value)</script>
            </iterate>
    </actions></service>

    <service verb="get" noun="User"><!-- could be replaced by userlist? -->
        <in-parameters>
            <parameter name="partyId" default="ec.user.userAccount.partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map"/>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <entity-find-one value-field="party" entity-name="mantle.party.Party">
                <field-map field-name="partyId"/></entity-find-one>
            <entity-find-one entity-name="mantle.party.Person" value-field="person">
                <field-map field-name="partyId"/></entity-find-one>
            <entity-find entity-name="moqui.security.UserAccount" list="accounts">
                <econdition field-name="partyId"/></entity-find>
            <if condition="accounts">
                <entity-find entity-name="moqui.security.UserGroupAndMember" list="groups">
                    <econdition field-name="userId" from="accounts[0].userId"/><date-filter/></entity-find>
                <set field="emailAddress" from="accounts[0].emailAddress"/>
            <else>
                <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                    in-map="[partyId: partyId]" out-map="context"/></else></if>
            <set field="user"
                from="[
                partyId: partyId,
                userId: accounts? accounts[0].userId: null,
                firstName: person.firstName,
                lastName: person.lastName,
                name: accounts? accounts[0].username: null,
                email: emailAddress,
                groupDescription: accounts?groups[0].description: null,
                userGroupId: accounts?groups[0].userGroupId: null,
                locale: accounts?accounts[0].locale: null,
                externalId: party?party.externalId: null]"/>
        </actions>
    </service>

    <service verb="get" noun="UserList">
        <description>
            Get all users of the company they belong to except logged in user when not specifically asked for
        </description>
        <in-parameters>
            <parameter name="partyId"/>
            <parameter name="full" type="Boolean" default-value="true"/>
            <parameter name="roleTypeId" default-value="Employee"/>
        </in-parameters>
        <out-parameters><parameter name="users" type="List"><parameter name="userInfo" type="Map"/></parameter></out-parameters>
        <actions>
            <if condition="partyId == '0'"><!-- get logged in user -->
                <set field="partyId" from="ec.user.userAccount.partyId"/></if>
            <set field="users" from="[]"/>
            <service-call name="growerp.mobile.MobilePartyServices.get#Company" out-map="context"/>
            <entity-find entity-name="CompanyPersonAndLogin"  list="userInfos">
                <econdition field-name="fromRoleTypeId" from="roleTypeId"/>
                <econdition field-name="toPartyId" from="company.partyId"/>
                <econdition field-name="fromPartyId" from="partyId" ignore-if-empty="true"/>
                <order-by field-name="lastName"/><order-by field-name="firstName"/>
            </entity-find>
            <iterate entry="userInfo" list="userInfos">
                <!-- if condition="!partyId &amp;&amp; userInfo.fromPartyId == ec.user.userAccount.partyId"><continue/></if-->
                <set field="imageFile" value=""/>
                <if condition="full == true">
                    <service-call name="growerp.mobile.MobileRestServices.download#Image"
                        in-map="[size: partyId?'medium':'small', type: 'user', id: userInfo.fromPartyId]" out-map="context"/>
                    <set field="email" from="userInfo.emailAddress"/>
                    <if condition="roleTypeId == 'Employee'">
                        <entity-find entity-name="moqui.security.UserGroupAndMember" list="groupList">
                            <econdition field-name="userId" from="userInfo.userId"/>
                            <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/><date-filter/></entity-find></if>
                    <if condition="!email">
                        <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                            in-map="[partyId: userInfo.fromPartyId]" out-map="context"/>
                        <set field="email" from="emailAddress"/></if>
                    <set field="user" from="[
                        partyId: userInfo.fromPartyId,
                        email: email,
                        username: userInfo.username,
                        firstName: userInfo.firstName,
                        lastName: userInfo.lastName,
                        userId: userInfo.userId? userInfo.userId: null,
                        userGroupId: userInfo.userId? groupList[0].userGroupId: null,
                        groupDescription: userInfo.userId? groupList[0].description: null,
                        externalId: userInfo.externalId,
                        image: imageFile]"/>
                <else>
                    <if condition="roleTypeId == 'Customer'">
                        <set field="user" from="userInfo.externalId + ' ' + userInfo.firstName + ' ' + userInfo.lastName"/></if>
                    <if condition="roleTypeId == 'Employee'">
                        <set field="user" from="[partyId: userInfo.fromPartyId, firstName: userInfo.firstName, lastName: userInfo.lastName]"/></if>
                </else></if>
                <script>users.add(user)</script>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="User">
        <description>
            add a new user on the same company as the logged in user
        </description>
        <in-parameters>
            <parameter name="firstName" required="true"/>
            <parameter name="lastName" required="true"/>
            <parameter name="emailAddress"  required="true"/>
            <parameter name="locale"/>
            <parameter name="roleTypeId" required="true"/>
            <parameter name="externalId"/>
            <parameter name="groupDescription"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <if condition="roleTypeId == 'Customer' &amp;&amp; !externalId">
                <log level="error" message="If the new user is a customer, externalId should be provided"/>
                <return/></if>
            <if condition="roleTypeId == 'Employee' &amp;&amp; !groupDescription">
                <log level="error" message="If the new user is a employee, groupDescription should be provided"/>
                <return/></if>
            <service-call name="growerp.mobile.MobilePartyServices.get#Company" out-map="compOut"/>
            <if condition="roleTypeId == 'Employee'">
                <set field="newPassword" value="justTemp99!"/>
                <service-call name="growerp.mobile.MobileRestServices.register#UserAndCompany"
                    in-map="[context + [companyPartyId: compOut.company.partyId]]" out-map="context"/>
            </if>
            <if condition="roleTypeId == 'Customer'">
                <service-call name="create#mantle.party.Party"
                    in-map="[externalId: externalId, partyTypeEnumId: 'PrtCustomer', ownerPartyId: compOut.company.partyId]"
                    out-map="context"/>
                <service-call name="create#mantle.party.Person" in-map="context"/>
                <!-- attach the user as an employee to the organization. -->
                <service-call name="mantle.party.PartyServices.ensure#PartyRole" in-map="[context+ [roleTypeId: 'Customer']]"/>
                <service-call name="create#mantle.party.PartyRelationship"
                    in-map="[fromPartyId: partyId, fromRoleTypeId: 'Customer', relationshipTypeEnumId: 'PrtCustomer',
                        fromDate: ec.user.nowTimestamp, toPartyId: compOut.company.partyId, toRoleTypeId: 'OrgInternal']"/>
                <service-call name="mantle.party.ContactServices.create#EmailAddress"
                    in-map="[partyId: partyId, contactMechPurposeId: 'EmailPrimary', emailAddress: emailAddress]"/>
            </if>
        </actions>
    </service>
    <service verb="update" noun="User">
        <description>
            update user information if partyId present, else create
        </description>
        <in-parameters>
            <parameter name="partyId" default="ec.user.userAccount.partyId"/>
            <parameter name="userId"/>
            <parameter name="username"/>
            <parameter name="firstName"/>
            <parameter name="lastName"/>
            <parameter name="emailAddress"/>
            <parameter name="locale"/>
            <parameter name="groupDescription"/>
            <parameter name="externalId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="growerp.mobile.MobilePartyServices.get#User" in-map="[partyId: partyId]" out-map="oldValue"/>
            <service-call name="update#mantle.party.Person" in-map="[partyId: partyId, firstName: firstName, lastName: lastName]"/>
            <entity-find-one value-field="employeeRole" entity-name="mantle.party.PartyRole">
                <field-map field-name="partyId"/><field-map field-name="roleTypeId" value="Employee"/></entity-find-one>
            <if condition="employeeRole">
                <service-call name="mantle.party.PartyServices.update#PartyUserAccount"
                    in-map="[partyId: partyId, emailAddress: emailAddress, username: username]"/>
                <if condition="groupDescription &amp;&amp; groupDescription != oldValue.user.groupDescription">
                    <entity-find entity-name="moqui.security.UserGroupAndMember" list="admins">
                        <econdition field-name="userGroupId" value="GROWERP_M_ADMIN"/>
                        <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/>
                        <date-filter/></entity-find>
                    <if condition="admins.size() == 1">
                        <return error="true" message="You need at least a single Admin in your company: cannot remove this one!"/></if>
                    <set field="growerpMobileGroups" from="[]"/>
                    <entity-find entity-name="moqui.security.UserGroup" list="mobileGroupMembers">
                        <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/></entity-find>
                    <iterate entry="mobileGroupMember" list="mobileGroupMembers">
                        <script>growerpMobileGroups.add(mobileGroupMember.userGroupId)</script>
                    </iterate>
                    <entity-find entity-name="moqui.security.UserGroupMember" list="groupMembers" for-update="true">
                        <econdition field-name="userId" from="oldValue.user.userId"/>
                        <econdition field-name="userGroupId" operator="in" from="growerpMobileGroups"/>
                        <date-filter/></entity-find>
                    <set field="groupMembers[0].thruDate" from="ec.user.nowTimestamp"/>
                    <entity-update value-field="groupMembers[0]"/>
                    <entity-find entity-name="moqui.security.UserGroup" list="groupValues">
                        <econdition field-name="description" from="groupDescription"/>
                        <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/></entity-find>
                    <if condition="!groupValues"><return error="true" message="Updating security group failed, group description: ${groupDescription} not found"/></if>
                    <service-call name="create#moqui.security.UserGroupMember"
                        in-map="[userGroupId: groupValues[0].userGroupId, userId: oldValue.user.userId, fromDate: ec.user.nowTimestamp]"/></if>
            <else><!-- customer -->
                <entity-find-one value-field="party" entity-name="mantle.party.Party" for-update="true">
                    <field-map field-name="partyId"/></entity-find-one>
                <if condition="externalId != party.externalId">
                    <set field="party.externalId" from="externalId"/>
                    <entity-update value-field="party"/></if>
                <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                    in-map="[partyId: partyId]" out-map="oldEmail"/>
                <if condition="emailAddress != oldEmail.emailAddress">
                    <entity-find list="partyContactMechs" entity-name="mantle.party.contact.PartyContactMech" for-update="true">
                        <econdition field-name="partyId"/>
                        <econdition field-name="contactMechId" from="oldEmail.contactMechId"/><date-filter/></entity-find>
                    <set field="partyContactMechs[0].thruDate" from="ec.user.nowTimestamp"/>
                    <entity-update value-field="partyContactMechs[0]"/>
                    <service-call name="mantle.party.ContactServices.create#EmailAddress"
                        in-map="[partyId: partyId, contactMechPurposeId: 'EmailPrimary', emailAddress: emailAddress]"/></if></else></if>
            <service-call name="growerp.mobile.MobilePartyServices.get#User" out-map="context"/>
        </actions>
    </service>

    <service verb="delete" noun="User">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one value-field="employee" entity-name="mantle.party.PartyRole">
                <field-map field-name="partyId"/><field-map field-name="roleTypeId" value="Employee"/></entity-find-one>
            <if condition="employee">
                <entity-find entity-name="moqui.security.UserAccount" list="userAccounts">
                    <econdition field-name="partyId"/></entity-find><!-- assuming user has a single account -->
                <entity-find entity-name="moqui.security.UserGroupAndMember" list="admins">
                    <econdition field-name="userGroupId" value="GROWERP_M_ADMIN"/>
                    <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/>
                    <date-filter/></entity-find>
                <entity-find entity-name="moqui.security.UserGroupAndMember" list="thisUsers">
                    <econdition field-name="userId" from="userAccounts[0].userId"/>
                    <econdition field-name="groupTypeEnumId" value="GROWERPMOBILE"/>
                    <date-filter/></entity-find>
                <if condition="admins.size() == 1 &amp;&amp; thisUsers[0].userGroupId == 'GROWERP_M_ADMIN'">
                    <return error="true" message="You need at least a single Admin in your company: cannot remove this one!"/></if></if>

            <service-call name="update#mantle.party.Party" in-map="[partyId: partyId, disabled: 'Y']"/>
        </actions>
    </service>

    <service verb="get" noun="Company">
        <out-parameters>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyRelationship" list="relList">
                <date-filter/>
                <econditions><econdition field-name="fromPartyId" from="ec.user.userAccount.partyId"/>
                <econdition field-name="fromRoleTypeId" value="Employee"/>
                <econdition field-name="toRoleTypeId" value="OrgInternal"/></econditions></entity-find>
            <set field="companyPartyId" from="relList[0].toPartyId"/>
            <entity-find-one entity-name="mantle.party.Organization" value-field="org">
                <field-map field-name="partyId" from="companyPartyId"/></entity-find-one>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="pref">
                <field-map field-name="organizationPartyId" from="companyPartyId"/></entity-find-one>
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                in-map="[partyId: companyPartyId]" out-map="context"/>
            <set field="company" from="[
                partyId: companyPartyId,
                name: org.organizationName,
                email: emailAddress,
                contactMechId: contactMechId,
                currency: pref.baseCurrencyUomId
                ]"/>
        </actions>
    </service>
    <service verb="get" noun="RelatedCompanyPartyId">
        <in-parameters><parameter name="userPartyId" default="ec.user.userAccount.partyId"/></in-parameters>
        <out-parameters><parameter name="partyId"/><parameter name="ownerPartyId"/></out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyRelationship" list="relList">
                <date-filter/>
                <econdition field-name="fromPartyId" from="userPartyId"/>
                <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                <select-field field-name="toPartyId"/>
            </entity-find>
            <if condition="relList">
                <set field="partyId" from="fromPartyId"/>
                <set field="ownerPartyId" from="relList[0].toPartyId"/>
            <else><return message="User ${userPartyId} has no related company!!" error="true"/></else></if>
        </actions>
    </service>
    <service verb="get" noun="UserAndCompany">
        <description>
            get user and related company information from the current logged in user
        </description>
        <out-parameters>
            <parameter name="user" type="Map"/>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="growerp.mobile.MobilePartyServices.get#User" out-map="context"/>
            <service-call name="growerp.mobile.MobilePartyServices.get#Company" out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="Company">
        <description>
            update company information
        </description>
        <in-parameters>
            <parameter name="organizationName"/>
            <parameter name="emailAddress"/>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="growerp.mobile.MobilePartyServices.get#Company" out-map="oldValue"/>
            <if condition="organizationName &amp;&amp; !oldValue.company.name.equals(organizationName)">
                <service-call name="update#mantle.party.Organization"
                    in-map="[partyId: oldValue.company.partyId, organizationName: organizationName]"/>
            </if>
            <if condition="emailAddress != oldValue.company.emailAddress">
                <entity-find list="partyContactMechs" entity-name="mantle.party.contact.PartyContactMech" for-update="true">
                    <econdition field-name="partyId" from="oldValue.company.partyId"/>
                    <econdition field-name="contactMechId" from="oldValue.company.contactMechId"/><date-filter/></entity-find>
                <set field="partyContactMechs[0].thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="partyContactMechs[0]"/>
                <service-call name="mantle.party.ContactServices.create#EmailAddress"
                    in-map="[partyId: oldValue.company.partyId, contactMechPurposeId: 'EmailPrimary', emailAddress: emailAddress]"/>
            </if>
        </actions>
    </service>

    <service verb="findxxx" noun="Customerxxx"><!-- ===============not used?============== -->
        <description>
            Get all or some customers of the company they belong to
        </description>
        <in-parameters>
            <parameter name="externalId"/>
            <parameter name="lastName"/>
            <parameter name="full" type="Boolean" default-value="true"/>
        </in-parameters>
        <out-parameters><parameter name="customers" type="List"><parameter name="customerInfo" type="Map"/></parameter></out-parameters>
        <actions>
            <set field="customers" from="[]"/>
            <service-call name="growerp.mobile.MobilePartyServices.get#Company" out-map="context"/>
            <entity-find entity-name="CompanyPersonAndLogin"  list="userInfos">
                <econdition field-name="fromRoleTypeId" value="Customer"/>
                <econdition field-name="toPartyId" from="company.partyId"/>
                <econdition field-name="externalId" ignore-if-empty="true"/>
                <econdition field-name="lastName" ignore-if-empty="true"/>
            </entity-find>
            <iterate entry="userInfo" list="userInfos">
                <set field="imageFile" value=""/>
                <if condition="full">
                    <service-call name="growerp.mobile.MobileRestServices.download#Image"
                        in-map="[size: 'small', type: 'user', id: userInfo.partyId]" out-map="context"/>
                    <set field="customer" from="[
                        id: userInfo.partyId,
                        email: userInfo.emailAddress,
                        username: userInfo.username,
                        userFullName: userInfo.userfirstName + ' ' + userInfo.lastName,
                        function: description,
                        image: imageFile? imageFile : '~/assets/images/addImage.png',
                        ]"/>
                <else>
                    <set field="customer" from="[
                        partyId: userInfo.partyId,
                        userFullName: userInfo.userfirstName + ' ' + userInfo.lastName,
                        externalId; userInfo.externalId
                    ]"/></else></if>
                <script>customers.add(customer)</script>
            </iterate>
        </actions>
    </service>



</services>